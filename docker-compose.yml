version: '3.8'

services:
  # ---------- API GATEWAY ----------
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - USER_SERVICE_URI=http://user-service:8081
      - ORDER_SERVICE_URI=http://order-service:8083
      - AUTH_SERVICE_URI=http://authentication-service:8082
    depends_on:
      authentication-service:
        condition: service_started
      user-service:
        condition: service_started
      order-service:
        condition: service_started

  # ---------- AUTHENTICATION SERVICE ----------
  auth-postgres:
    image: postgres:16
    container_name: auth-postgres
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: auth_db
    volumes:
      - auth_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 5

  authentication-service:
    build:
      context: ./authentication-service
      dockerfile: Dockerfile
    container_name: authentication-service
    ports:
      - "8082:8082"
    environment:
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      auth-postgres:
        condition: service_healthy

  # ---------- USER SERVICE ----------
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: user_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # ---------- ORDER SERVICE ----------
  order-postgres:
    image: postgres:16
    container_name: order-postgres
    restart: always
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: order_db
    volumes:
      - order_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 5

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8083:8083"
    depends_on:
      order-postgres:
        condition: service_healthy
      user-service:
        condition: service_started

volumes:
  pgdata:
  redisdata:
  auth_pgdata:
  order_pgdata:
