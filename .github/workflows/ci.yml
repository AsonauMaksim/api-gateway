name: API Gateway CI Pipeline

on:
  push:
    branches: [ main, feature/api-gateway-* ]
  pull_request:
    branches: [ main ]

env:
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  build:
    name: Build (skip tests)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build project
        run: mvn clean install -DskipTests

  sonar-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build project for analysis
        run: mvn clean install -DskipTests

      - name: Run SonarCloud scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=AsonauMaksim_api-gateway \
            -Dsonar.organization=asonaumaksim \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.branch.name=${GITHUB_REF_NAME}

  docker-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: sonar-analysis

    env:
      IMAGE_NAME: zabungalilovo/api-gateway

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Extract version from pom.xml
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Package application
        run: mvn clean package -DskipTests

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:${{ env.VERSION }} .
          docker tag $IMAGE_NAME:${{ env.VERSION }} $IMAGE_NAME:latest

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:${{ env.VERSION }}
          docker push $IMAGE_NAME:latest
